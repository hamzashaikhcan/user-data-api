{
	"info": {
		"_postman_id": "e5a06d1b-7f4a-4b3d-8e7c-f2b9c0ee7d84",
		"name": "User Data API",
		"description": "A collection to test the User Data API with advanced caching, rate limiting, and asynchronous processing.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Endpoints",
			"description": "Endpoints for working with user data",
			"item": [
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"1"
							]
						},
						"description": "Retrieve a user by ID. Makes use of cache on repeat requests."
					},
					"response": []
				},
				{
					"name": "Get User by ID (Cached)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"1"
							]
						},
						"description": "This is a repeat request for the same user that should be served from cache. Note the response time difference."
					},
					"response": []
				},
				{
					"name": "Get Non-existent User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"999"
							]
						},
						"description": "Test error handling by requesting a non-existent user ID."
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "Retrieve all users."
					},
					"response": []
				},
				{
					"name": "Create User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"test@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "Create a new user. The created user will be automatically cached."
					},
					"response": []
				},
				{
					"name": "Create User (Invalid)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Invalid User\"\n    // Missing email field\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "Test validation by attempting to create a user with missing required fields."
					},
					"response": []
				}
			]
		},
		{
			"name": "Cache Management",
			"description": "Endpoints for managing and monitoring the cache",
			"item": [
				{
					"name": "Get Cache Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/cache/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cache",
								"status"
							]
						},
						"description": "Get current cache statistics including hits, misses, and size."
					},
					"response": []
				},
				{
					"name": "Clear Cache",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/cache",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cache"
							]
						},
						"description": "Clear the entire cache."
					},
					"response": []
				},
				{
					"name": "Get Queue Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/cache/queue",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cache",
								"queue"
							]
						},
						"description": "Get current queue statistics."
					},
					"response": []
				},
				{
					"name": "Get System Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/cache/system",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cache",
								"system"
							]
						},
						"description": "Get combined cache and queue statistics."
					},
					"response": []
				}
			]
		},
		{
			"name": "Monitoring",
			"description": "Endpoints for monitoring system health and metrics",
			"item": [
				{
					"name": "Get Prometheus Metrics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/metrics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"metrics"
							]
						},
						"description": "Get Prometheus-compatible metrics for monitoring."
					},
					"response": []
				},
				{
					"name": "Get Health Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check API health."
					},
					"response": []
				}
			]
		},
		{
			"name": "Rate Limiting Tests",
			"description": "Tests to verify rate limiting behavior",
			"item": [
				{
					"name": "Rapid Requests (1)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"1"
							]
						},
						"description": "First of multiple rapid requests to test rate limiting. Run these in quick succession."
					},
					"response": []
				},
				{
					"name": "Rapid Requests (2)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"1"
							]
						},
						"description": "Continue rapid requests to test rate limiting."
					},
					"response": []
				},
				{
					"name": "Rapid Requests (3)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"1"
							]
						},
						"description": "Continue rapid requests to test rate limiting."
					},
					"response": []
				},
				{
					"name": "Rapid Requests (4)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"1"
							]
						},
						"description": "Continue rapid requests to test rate limiting."
					},
					"response": []
				},
				{
					"name": "Rapid Requests (5)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"1"
							]
						},
						"description": "Continue rapid requests to test rate limiting."
					},
					"response": []
				},
				{
					"name": "Rapid Requests (6 - Should be rate limited)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"1"
							]
						},
						"description": "This request should be rate limited after the burst limit is exceeded."
					},
					"response": []
				}
			]
		},
		{
			"name": "Cache Performance Tests",
			"description": "Tests to demonstrate caching performance improvements",
			"item": [
				{
					"name": "Clear Cache First",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/cache",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cache"
							]
						},
						"description": "Clear cache before performance testing."
					},
					"response": []
				},
				{
					"name": "Uncached Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"1"
							]
						},
						"description": "First request after cache clear, should be uncached and slower."
					},
					"response": []
				},
				{
					"name": "Cached Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"1"
							]
						},
						"description": "Second request, should be cached and faster. Compare the X-Response-Time header with the previous request."
					},
					"response": []
				},
				{
					"name": "Get Cache Statistics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/cache/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"cache",
								"status"
							]
						},
						"description": "Check cache statistics after performance tests."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}